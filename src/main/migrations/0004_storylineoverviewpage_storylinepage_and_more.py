# Generated by Django 4.1.3 on 2022-11-04 09:13

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion
import main.blocks.storyline_section
import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_headless_preview.models


class Migration(migrations.Migration):

    dependencies = [
        ("customimage", "0003_alter_customimage_file_hash"),
        ("api", "0003_scenario_remove_slider_slider_locked_and_more"),
        ("main", "0003_wikipage"),
    ]

    operations = [
        migrations.CreateModel(
            name="StorylineOverviewPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "StorylineOverview",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="StorylinePage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the storyline", null=True
                    ),
                ),
                (
                    "card_color",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("card__bg-gold", "Gold"),
                            ("card__bg-blue", "Blue"),
                            ("card__bg-gray", "Gray"),
                            ("card__bg-purple", "Purple"),
                            ("card__bg-pink", "Pink"),
                            ("card__bg-orange", "Orange"),
                        ],
                        default="card__bg-blue",
                        help_text="Background color in storyline overview page",
                        max_length=20,
                    ),
                ),
                (
                    "storyline",
                    wagtail.fields.StreamField(
                        [
                            (
                                "text_and_media",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                help_text="Add your text",
                                                required=True,
                                                rows=15,
                                            ),
                                        ),
                                        (
                                            "media",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "image",
                                                        wagtail.images.blocks.ImageChooserBlock(
                                                            required=False
                                                        ),
                                                    ),
                                                    (
                                                        "video",
                                                        wagtail.embeds.blocks.EmbedBlock(
                                                            required=False
                                                        ),
                                                    ),
                                                ],
                                                help_text="Choose an image or paste an embed url",
                                                max_num=1,
                                            ),
                                        ),
                                        (
                                            "grid_layout",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("25_75", "25% - 75%"),
                                                    ("50_50", "50% - 50%"),
                                                    ("75_25", "75% - 25%"),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "section",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "content",
                                            wagtail.blocks.StreamBlock(
                                                [
                                                    (
                                                        "text",
                                                        wagtail.blocks.RichTextBlock(),
                                                    ),
                                                    (
                                                        "slider",
                                                        wagtail.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "slider",
                                                                    wagtail.blocks.ChoiceBlock(
                                                                        choices=main.blocks.storyline_section.get_sliders
                                                                    ),
                                                                ),
                                                                (
                                                                    "visible",
                                                                    wagtail.blocks.BooleanBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                                (
                                                                    "locked",
                                                                    wagtail.blocks.BooleanBlock(
                                                                        required=False
                                                                    ),
                                                                ),
                                                            ]
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                        ],
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Storyline",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="StorylinePageInformationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(editable=False, populate_from="name"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("book", "Book"),
                            ("bell", "Bell"),
                            ("cog", "Cog"),
                            ("folder", "Folder"),
                            ("heart", "Heart"),
                            ("info", "Info"),
                            ("lightning", "Lightning bolt"),
                            ("mapmarker", "Map marker"),
                            ("rocket", "Rocket"),
                            ("star", "Star"),
                            ("user", "User"),
                        ],
                        default="green",
                        help_text="Icon shown in storyline overview page",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Storyline InformationType",
                "verbose_name_plural": "Storyline InformationTypes",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="StorylinePageRoleType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(editable=False, populate_from="name"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("book", "Book"),
                            ("bell", "Bell"),
                            ("cog", "Cog"),
                            ("folder", "Folder"),
                            ("heart", "Heart"),
                            ("info", "Info"),
                            ("lightning", "Lightning bolt"),
                            ("mapmarker", "Map marker"),
                            ("rocket", "Rocket"),
                            ("star", "Star"),
                            ("user", "User"),
                        ],
                        default="green",
                        help_text="Icon shown in storyline overview page",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Storyline Roletype",
                "verbose_name_plural": "Storyline Rolestypes",
                "ordering": ["name"],
            },
        ),
        migrations.RemoveField(
            model_name="articlepage",
            name="basepage_ptr",
        ),
        migrations.DeleteModel(
            name="AboutPage",
        ),
        migrations.DeleteModel(
            name="ArticlePage",
        ),
        migrations.AddField(
            model_name="storylinepage",
            name="information_types",
            field=modelcluster.fields.ParentalManyToManyField(
                blank=True, to="main.storylinepageinformationtype"
            ),
        ),
        migrations.AddField(
            model_name="storylinepage",
            name="roles",
            field=modelcluster.fields.ParentalManyToManyField(
                blank=True, to="main.storylinepageroletype"
            ),
        ),
        migrations.AddField(
            model_name="storylinepage",
            name="scenario",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="api.scenario",
            ),
        ),
        migrations.AddField(
            model_name="storylinepage",
            name="thumbnail",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="customimage.customimage",
            ),
        ),
    ]
