# Generated by Django 4.1.7 on 2023-03-10 14:03

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("holon", "0002_auto_20230310_1503"),
    ]

    operations = [
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("OPERATORGRID", "Operatorgrid"),
                            ("GOVHOLON", "Govholon"),
                            ("HOLONENERGY", "Holonenergy"),
                            ("CONNECTIONOWNER", "Connectionowner"),
                            ("SUPPLIERENERGY", "Supplierenergy"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("COMMERCIAL", "Commercial"),
                            ("HOUSEHOLD", "Household"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "subgroup",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("RICH", "Rich"),
                            ("POOR", "Poor"),
                            ("REGULAR", "Regular"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="AnylogicCloudConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_key", models.CharField(max_length=40)),
                (
                    "url",
                    models.URLField(
                        default="https://engine.holontool.nl", max_length=100
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                (
                    "model_version_number",
                    models.IntegerField(
                        help_text="Use this field to define the AnyLogic Cloud model version number"
                    ),
                ),
                (
                    "owner_email",
                    models.EmailField(
                        help_text="This will be used to send the owner emails when things break",
                        max_length=254,
                    ),
                ),
            ],
            options={
                "verbose_name": "Anylogic cloudclient configuratie",
            },
        ),
        migrations.CreateModel(
            name="Contract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contractType",
                    models.CharField(
                        choices=[
                            ("DELIVERY", "Delivery"),
                            ("TRANSPORT", "Transport"),
                            ("CONNECTION", "Connection"),
                            ("TAX", "Tax"),
                        ],
                        default="DELIVERY",
                        max_length=255,
                    ),
                ),
                (
                    "energyCarrier",
                    models.CharField(
                        choices=[
                            ("ELECTRICITY", "Electricity"),
                            ("HEAT", "Heat"),
                            ("METHANE", "Methane"),
                            ("HYDROGEN", "Hydrogen"),
                            ("DIESEL", "Diesel"),
                        ],
                        default="ELECTRICITY",
                        max_length=255,
                    ),
                ),
                ("annualFee_eur", models.FloatField(default=0.0)),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contracts",
                        to="holon.actor",
                    ),
                ),
                (
                    "contractScope",
                    models.ForeignKey(
                        default=4,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="holon.actor",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="EnergyAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="ETMQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "internal_key",
                    models.CharField(
                        help_text="Key that is used internally (downstream) to access the data associated with this query result",
                        max_length=35,
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        choices=[
                            ("input", "Input"),
                            ("query", "Query"),
                            ("curve", "Curve"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[("value", "Value"), ("curve", "Curve")], max_length=255
                    ),
                ),
                (
                    "etm_key",
                    models.CharField(
                        help_text="Key as defined in the ETM", max_length=255
                    ),
                ),
                (
                    "interactive_upscaling_comment",
                    models.CharField(
                        blank=True,
                        help_text="Use this field to explain the query in the front-end. Use {{variable}} for dynamic values. Options: local key-value pairs e.g., `scaling_factor`, `final_value` or `query_value` (to be implemented)",
                        max_length=350,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FloatKeyValuePair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=255)),
                ("value", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="GridConnection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("capacity_kw", models.FloatField()),
                (
                    "charging_mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MAX_POWER", "Max Power"),
                            ("MAX_SPREAD", "Max Spread"),
                            ("CHEAP", "Cheap"),
                            ("SIMPLE", "Simple"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "battery_mode",
                    models.CharField(
                        blank=True,
                        choices=[("BALANCE", "Balance"), ("PRICE", "Price")],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("nfATO_capacity_kw", models.FloatField(blank=True, null=True)),
                ("nfATO_starttime", models.FloatField(blank=True, null=True)),
                ("nfATO_endtime", models.FloatField(blank=True, null=True)),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
                (
                    "owner_actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="holon.actor"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="GridNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("capacity_kw", models.FloatField()),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
                (
                    "owner_actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="holon.actor"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="holon.gridnode",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="InteractiveElement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("single_select", "Choice Singleselect"),
                            ("multi_select", "Choice Multiselect"),
                            ("continuous", "Choice Continuous"),
                        ],
                        default="continuous",
                        max_length=19,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("National", "Level National"),
                            ("Intermediate", "Level Intermediate"),
                            ("Local", "Level Local"),
                        ],
                        help_text="If type is 'Continuous (slider)', choose a level. Otherwise, leave it empty",
                        max_length=13,
                        null=True,
                    ),
                ),
                ("more_information", models.CharField(blank=True, max_length=100)),
                (
                    "link_wiki_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="Use this to link to an internal wiki page.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="main.wikipage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Interactive Element",
            },
        ),
        migrations.CreateModel(
            name="RuleAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asset_attribute",
                    models.CharField(
                        default="asset_attribute_not_supplied", max_length=100
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "RuleAction",
            },
        ),
        migrations.CreateModel(
            name="Scenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("version", models.IntegerField(default=1)),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Scenario",
            },
        ),
        migrations.AlterModelOptions(
            name="factor",
            options={"base_manager_name": "objects"},
        ),
        migrations.AlterUniqueTogether(
            name="factor",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="factor",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.CreateModel(
            name="BuiltEnvironmentGridConnection",
            fields=[
                (
                    "gridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.gridconnection",
                    ),
                ),
                (
                    "insulation_label",
                    models.IntegerField(
                        choices=[
                            (7, "A"),
                            (6, "B"),
                            (5, "C"),
                            (4, "D"),
                            (3, "E"),
                            (2, "F"),
                            (1, "G"),
                            (-1, "NONE"),
                        ]
                    ),
                ),
                (
                    "heating_type",
                    models.CharField(
                        choices=[
                            ("GASBURNER", "Gasburner"),
                            ("GASFIRED", "Gasfired"),
                            ("HEATPUMP_GASPEAK", "Heatpump Gaspeak"),
                            ("DISTRICTHEAT", "Districtheat"),
                            ("HEATPUMP_BOILERPEAK", "Heatpump Boilerpeak"),
                            ("HYDROGENFIRED", "Hydrogenfired"),
                            ("GASFIRED_CHPPEAK", "Gasfired Chppeak"),
                            (
                                "LT_RESIDUAL_HEATPUMP_GASPEAK",
                                "Lt Residual Heatpump Gaspeak",
                            ),
                            ("NONE", "None"),
                        ],
                        max_length=100,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.gridconnection",),
        ),
        migrations.CreateModel(
            name="ConnectionContract",
            fields=[
                (
                    "contract_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.contract",
                    ),
                ),
                (
                    "connectionContractType",
                    models.CharField(
                        choices=[("DEFAULT", "Default"), ("NFATO", "Nfato")],
                        max_length=255,
                    ),
                ),
                ("nfATO_capacity_kW", models.FloatField()),
                ("nfATO_starttime_h", models.FloatField()),
                ("nfATO_endtime_h", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.contract",),
        ),
        migrations.CreateModel(
            name="ConsumptionAsset",
            fields=[
                (
                    "energyasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.energyasset",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ELECTRICITY_DEMAND", "Electricity Demand"),
                            ("HEAT_DEMAND", "Heat Demand"),
                            ("HOT_WATER_CONSUMPTION", "Hot Water Consumption"),
                            (
                                "OTHER_ELECTRICITY_CONSUMPTION",
                                "Other Electricity Consumption",
                            ),
                            ("DIESEL_VEHICLE", "Diesel Vehicle"),
                        ],
                        max_length=255,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.energyasset",),
        ),
        migrations.CreateModel(
            name="ConversionAsset",
            fields=[
                (
                    "energyasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.energyasset",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ELECTRIC_HEATER", "Electric Heater"),
                            ("GAS_BURNER", "Gas Burner"),
                            ("HEAT_DELIVERY_SET", "Heat Delivery Set"),
                            ("HEAT_PUMP_AIR", "Heat Pump Air"),
                            ("HEAT_PUMP_GROUND", "Heat Pump Ground"),
                            ("HEAT_PUMP_WATER", "Heat Pump Water"),
                            ("HYDROGEN_FURNACE", "Hydrogen Furnace"),
                            ("METHANE_FURNACE", "Methane Furnace"),
                            ("ELECTROLYSER", "Electrolyser"),
                            ("CURTAILER", "Curtailer"),
                            ("METHANE_CHP", "Methane Chp"),
                        ],
                        max_length=255,
                    ),
                ),
                ("eta_r", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.energyasset",),
        ),
        migrations.CreateModel(
            name="CookingConversionAsset",
            fields=[
                (
                    "energyasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.energyasset",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ELECTRIC_HOB", "Electric Hob"),
                            ("GAS_PIT", "Gas Pit"),
                        ],
                        max_length=255,
                    ),
                ),
                ("capacityHeat_kW", models.FloatField(blank=True, null=True)),
                ("capacityElectricity_kW", models.FloatField(blank=True, null=True)),
                ("eta_r", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.energyasset",),
        ),
        migrations.CreateModel(
            name="DeliveryContract",
            fields=[
                (
                    "contract_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.contract",
                    ),
                ),
                (
                    "deliveryContractType",
                    models.CharField(
                        choices=[
                            ("ELECTRICITY_FIXED", "Fixed"),
                            ("ELECTRICITY_VARIABLE", "Variable"),
                        ],
                        max_length=255,
                    ),
                ),
                ("deliveryPrice_eurpkWh", models.FloatField()),
                ("feedinPrice_eurpkWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.contract",),
        ),
        migrations.CreateModel(
            name="ElectricGridNode",
            fields=[
                (
                    "gridnode_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.gridnode",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("MSLS", "Msls"), ("HSMS", "Hsms")], max_length=4
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.gridnode",),
        ),
        migrations.CreateModel(
            name="HeatGridNode",
            fields=[
                (
                    "gridnode_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.gridnode",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("MT", "Mt"), ("HT", "Ht"), ("LT", "Lt")], max_length=2
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.gridnode",),
        ),
        migrations.CreateModel(
            name="NonFirmActor",
            fields=[
                (
                    "actor_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.actor",
                    ),
                ),
                ("nfATO_capacity_kw", models.FloatField()),
                ("nfATO_starttime", models.FloatField()),
                ("nfATO_endtime", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.actor",),
        ),
        migrations.CreateModel(
            name="ProductionAsset",
            fields=[
                (
                    "energyasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.energyasset",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("PHOTOVOLTAIC", "Photovoltaic"),
                            ("WINDMILL", "Windmill"),
                            ("RESIDUALHEATHT", "Residualheatht"),
                            ("RESIDUALHEATLT", "Residualheatlt"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.energyasset",),
        ),
        migrations.CreateModel(
            name="ProductionGridConnection",
            fields=[
                (
                    "gridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.gridconnection",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("WINDFARM", "Windfarm"),
                            ("SOLARFARM", "Solarfarm"),
                            ("GRIDBATTERY", "Gridbattery"),
                            ("RESIDUALHEAT", "Residualheat"),
                        ],
                        max_length=25,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.gridconnection",),
        ),
        migrations.CreateModel(
            name="RuleActionAdd",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "RuleActionAdd",
            },
            bases=("holon.ruleaction", models.Model),
        ),
        migrations.CreateModel(
            name="RuleActionBalanceGroup",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
                ("selected_asset_type", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "verbose_name": "RuleActionBalanceGroup",
            },
            bases=("holon.ruleaction", models.Model),
        ),
        migrations.CreateModel(
            name="RuleActionChangeAttribute",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "RuleActionChangeAttribute",
            },
            bases=("holon.ruleaction",),
        ),
        migrations.CreateModel(
            name="RuleActionFactor",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
                ("min_value", models.IntegerField()),
                ("max_value", models.IntegerField()),
            ],
            options={
                "verbose_name": "RuleActionFactor",
            },
            bases=("holon.ruleaction",),
        ),
        migrations.CreateModel(
            name="RuleActionRemove",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "RuleActionRemove",
            },
            bases=("holon.ruleaction",),
        ),
        migrations.CreateModel(
            name="RuleActionSetCount",
            fields=[
                (
                    "ruleaction_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.ruleaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "RuleActionSetCount",
            },
            bases=("holon.ruleaction", models.Model),
        ),
        migrations.CreateModel(
            name="StorageAsset",
            fields=[
                (
                    "energyasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.energyasset",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ELECTRIC_VEHICLE", "Electric Vehicle"),
                            ("STORAGE_ELECTRIC", "Storage Electric"),
                            ("STORAGE_HEAT", "Storage Heat"),
                            ("HEATMODEL", "Heatmodel"),
                        ],
                        max_length=50,
                    ),
                ),
                ("stateOfCharge_r", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.energyasset",),
        ),
        migrations.CreateModel(
            name="TaxContract",
            fields=[
                (
                    "contract_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.contract",
                    ),
                ),
                (
                    "taxContractType",
                    models.CharField(
                        choices=[
                            ("SALDEREN", "Salderen"),
                            ("NIETSALDEREN", "Nietsalderen"),
                        ],
                        max_length=255,
                    ),
                ),
                ("taxDelivery_eurpkWh", models.FloatField()),
                ("taxFeedin_eurpkWh", models.FloatField()),
                ("proportionalTax_pct", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.contract",),
        ),
        migrations.CreateModel(
            name="TransportContract",
            fields=[
                (
                    "contract_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.contract",
                    ),
                ),
                (
                    "transportContractType",
                    models.CharField(
                        choices=[
                            ("DEFAULT", "Default"),
                            ("NODALPRICING", "Nodalpricing"),
                            ("BANDWIDTH", "Bandwidth"),
                        ],
                        max_length=255,
                    ),
                ),
                ("bandwidthTreshold_kW", models.FloatField()),
                ("bandwidthTariff_eurpkWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.contract",),
        ),
        migrations.CreateModel(
            name="UtilityGridConnection",
            fields=[
                (
                    "gridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.gridconnection",
                    ),
                ),
                (
                    "heating_type",
                    models.CharField(
                        choices=[
                            ("GASBURNER", "Gasburner"),
                            ("GASFIRED", "Gasfired"),
                            ("HEATPUMP_GASPEAK", "Heatpump Gaspeak"),
                            ("DISTRICTHEAT", "Districtheat"),
                            ("HEATPUMP_BOILERPEAK", "Heatpump Boilerpeak"),
                            ("HYDROGENFIRED", "Hydrogenfired"),
                            ("GASFIRED_CHPPEAK", "Gasfired Chppeak"),
                            (
                                "LT_RESIDUAL_HEATPUMP_GASPEAK",
                                "Lt Residual Heatpump Gaspeak",
                            ),
                            ("NONE", "None"),
                        ],
                        max_length=100,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.gridconnection",),
        ),
        migrations.CreateModel(
            name="StaticConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        blank=True, help_text="Value for static conversions", null=True
                    ),
                ),
                (
                    "conversion",
                    models.CharField(
                        choices=[
                            ("multiply", "Multiply"),
                            ("divide", "Divide"),
                            ("in_product", "In Product"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "shadow_key",
                    models.CharField(
                        help_text="Internal key, not used by humans but might occur in logs when errors occur",
                        max_length=255,
                    ),
                ),
                (
                    "etm_query",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="static_conversion_step",
                        to="holon.etmquery",
                    ),
                ),
                (
                    "local_variable",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="holon.floatkeyvaluepair",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScenarioRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("Actor", "Actor"),
                            ("EnergyAsset", "Energyasset"),
                            ("GridNode", "Gridnode"),
                            ("GridConnection", "Gridconnection"),
                            ("Policy", "Policy"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "model_subtype",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "interactive_element",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="holon.interactiveelement",
                    ),
                ),
            ],
            options={
                "verbose_name": "ScenarioRule",
            },
        ),
        migrations.CreateModel(
            name="RelationAttributeFilter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_attribute", models.CharField(max_length=255)),
                (
                    "comparator",
                    models.CharField(
                        choices=[
                            ("EQUAL", "Equal"),
                            ("LESS THAN", "Less Than"),
                            ("GREATER THAN", "Greater Than"),
                            ("NOT EQUAL", "Not Equal"),
                        ],
                        max_length=255,
                    ),
                ),
                ("value", models.JSONField()),
                ("relation_field", models.CharField(max_length=255)),
                (
                    "relation_field_subtype",
                    models.CharField(blank=True, max_length=255),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "rule",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relation_attribute_filters",
                        to="holon.scenariorule",
                    ),
                ),
            ],
            options={
                "verbose_name": "RelationAttributeFilter",
            },
        ),
        migrations.CreateModel(
            name="QueryAndConvertConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "module",
                    models.CharField(
                        choices=[
                            ("upscaling", "Upscaling"),
                            ("cost", "Cost"),
                            ("costbenefit", "Costbenefit"),
                        ],
                        max_length=255,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "api_url",
                    models.URLField(
                        default="https://beta-engine.energytransitionmodel.com/api/v3/scenarios/"
                    ),
                ),
                ("etm_scenario_id", models.IntegerField()),
                (
                    "scenario",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="query_and_convert_config",
                        to="holon.scenario",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("parameter", models.CharField(max_length=255)),
                ("value", models.CharField(max_length=255)),
                ("unit", models.CharField(blank=True, max_length=255, null=True)),
                ("comment", models.TextField()),
                (
                    "wildcard_JSON",
                    models.JSONField(
                        blank=True,
                        help_text="Use this field to define parameters that are not currently available in the datamodel.",
                        null=True,
                    ),
                ),
                (
                    "payload",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="holon.scenario"
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="KeyValuePairCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "related_config",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_value_pair_collection",
                        to="holon.queryandconvertconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "ETM module configuratie variabelen",
            },
        ),
        migrations.CreateModel(
            name="InteractiveElementOptions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "option",
                    models.CharField(help_text="Fill in your option", max_length=255),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="Fill in the label that the user sees in a storyline",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "default",
                    models.BooleanField(
                        default=False,
                        help_text="Should this option be default selected?",
                    ),
                ),
                (
                    "legal_limitation",
                    models.CharField(
                        blank=True,
                        help_text="Fill in the status of the legal limitation",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("National", "Level National"),
                            ("Intermediate", "Level Intermediate"),
                            ("Local", "Level Local"),
                        ],
                        default="National",
                        max_length=13,
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("No color", "Color None"),
                            ("Red", "Color Red"),
                            ("Orange", "Color Orange"),
                            ("Green", "Color Green"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "input",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="holon.interactiveelement",
                    ),
                ),
                (
                    "link_wiki_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="Use this to link to an internal page.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="main.wikipage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InteractiveElementContinuousValues",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slider_value_default",
                    models.IntegerField(
                        blank=True,
                        help_text="Default amount of the continuous input",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "slider_value_min",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="Minimum amount of the continuous input",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "slider_value_max",
                    models.IntegerField(
                        blank=True,
                        default=100,
                        help_text="Maximum amount of the continuous input",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "input",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="continuous_values",
                        to="holon.interactiveelement",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="interactiveelement",
            name="scenario",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="holon.scenario"
            ),
        ),
        migrations.AddField(
            model_name="gridnode",
            name="payload",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="holon.scenario"
            ),
        ),
        migrations.AddField(
            model_name="gridnode",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="gridconnection",
            name="payload",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="holon.scenario"
            ),
        ),
        migrations.AddField(
            model_name="gridconnection",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="floatkeyvaluepair",
            name="related_key_value_collection",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="float_key_value_pair",
                to="holon.keyvaluepaircollection",
            ),
        ),
        migrations.AddField(
            model_name="etmquery",
            name="related_config",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="etm_query",
                to="holon.queryandconvertconfig",
            ),
        ),
        migrations.AddField(
            model_name="etmquery",
            name="related_interactive_element",
            field=models.ForeignKey(
                blank=True,
                help_text="Use this field to relate this query and conversion set to an interactive element (used for rendering in the front-end)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.interactiveelement",
            ),
        ),
        migrations.CreateModel(
            name="ETMConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conversion",
                    models.CharField(
                        choices=[
                            ("multiply", "Multiply"),
                            ("divide", "Divide"),
                            ("in_product", "In Product"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "conversion_value_type",
                    models.CharField(
                        choices=[("value", "Value"), ("curve", "Curve")], max_length=255
                    ),
                ),
                (
                    "etm_key",
                    models.CharField(
                        help_text="Key as defined in the ETM", max_length=255
                    ),
                ),
                (
                    "shadow_key",
                    models.CharField(
                        help_text="Internal key, not used by humans but might occur in logs when errors occur",
                        max_length=255,
                    ),
                ),
                (
                    "etm_query",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="etm_conversion_step",
                        to="holon.etmquery",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="energyasset",
            name="gridconnection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.gridconnection",
            ),
        ),
        migrations.AddField(
            model_name="energyasset",
            name="gridnode",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.gridnode",
            ),
        ),
        migrations.AddField(
            model_name="energyasset",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.CreateModel(
            name="DiscreteAttributeFilter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_attribute", models.CharField(max_length=255)),
                (
                    "comparator",
                    models.CharField(
                        choices=[
                            ("EQUAL", "Equal"),
                            ("LESS THAN", "Less Than"),
                            ("GREATER THAN", "Greater Than"),
                            ("NOT EQUAL", "Not Equal"),
                        ],
                        max_length=255,
                    ),
                ),
                ("value", models.JSONField()),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "rule",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discrete_attribute_filters",
                        to="holon.scenariorule",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DatamodelConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conversion",
                    models.CharField(
                        choices=[
                            ("multiply", "Multiply"),
                            ("divide", "Divide"),
                            ("in_product", "In Product"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "conversion_value_type",
                    models.CharField(
                        choices=[("value", "Value"), ("curve", "Curve")], max_length=255
                    ),
                ),
                (
                    "filter",
                    models.CharField(
                        default="not_implemented",
                        help_text="Should be implemented as an inline panel that allows you to filter and select parts of the datamodel as you would",
                        max_length=255,
                    ),
                ),
                (
                    "self_conversion",
                    models.CharField(
                        choices=[("sum", "Sum"), ("count", "Count")],
                        help_text="Operation that is applied to the query set that results from the filter",
                        max_length=255,
                    ),
                ),
                (
                    "shadow_key",
                    models.CharField(
                        help_text="Internal key, not used by humans but might occur in logs when errors occur",
                        max_length=255,
                    ),
                ),
                (
                    "etm_query",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datamodel_conversion_step",
                        to="holon.etmquery",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BalanceGroupAssetOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="holon.energyasset",
                    ),
                ),
            ],
            options={
                "verbose_name": "BalanceGroupAssetOrder",
            },
        ),
        migrations.CreateModel(
            name="AttributeFilter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_attribute", models.CharField(max_length=255)),
                (
                    "comparator",
                    models.CharField(
                        choices=[
                            ("EQUAL", "Equal"),
                            ("LESS THAN", "Less Than"),
                            ("GREATER THAN", "Greater Than"),
                            ("NOT EQUAL", "Not Equal"),
                        ],
                        max_length=255,
                    ),
                ),
                ("value", models.JSONField()),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "rule",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attribute_filters",
                        to="holon.scenariorule",
                    ),
                ),
            ],
            options={
                "verbose_name": "AttributeFilter",
            },
        ),
        migrations.CreateModel(
            name="AnyLogicConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conversion",
                    models.CharField(
                        choices=[
                            ("multiply", "Multiply"),
                            ("divide", "Divide"),
                            ("in_product", "In Product"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "conversion_value_type",
                    models.CharField(
                        choices=[("value", "Value"), ("curve", "Curve")], max_length=255
                    ),
                ),
                (
                    "anylogic_key",
                    models.CharField(
                        help_text="Key as defined in the AnyLogic results",
                        max_length=255,
                    ),
                ),
                (
                    "shadow_key",
                    models.CharField(
                        help_text="Internal key, not used by humans but might occur in logs when errors occur",
                        max_length=255,
                    ),
                ),
                (
                    "etm_query",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="al_conversion_step",
                        to="holon.etmquery",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnylogicCloudOutput",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "anylogic_key",
                    models.CharField(
                        help_text="Key as provided in the AnyLogic Cloud response JSON",
                        max_length=50,
                    ),
                ),
                (
                    "internal_key",
                    models.CharField(
                        help_text="Key that is used internally to access the data associated with this AnyLogic key",
                        max_length=50,
                    ),
                ),
                (
                    "anylogic_model_configuration",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anylogic_cloud_output",
                        to="holon.anylogiccloudconfig",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnylogicCloudInput",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("anylogic_key", models.CharField(max_length=100)),
                (
                    "anylogic_value",
                    models.JSONField(
                        help_text="JSON format, will be parsed to be at available the same level in the JSON-payload as the other data"
                    ),
                ),
                (
                    "anylogic_model_configuration",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anylogic_cloud_input",
                        to="holon.anylogiccloudconfig",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="anylogiccloudconfig",
            name="scenario",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="anylogic_config",
                to="holon.scenario",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="payload",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="holon.scenario"
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_%(app_label)s.%(class)s_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.RemoveField(
            model_name="factor",
            name="asset",
        ),
        migrations.RemoveField(
            model_name="factor",
            name="grid_connection",
        ),
        migrations.CreateModel(
            name="BuildingGridConnection",
            fields=[
                (
                    "builtenvironmentgridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.builtenvironmentgridconnection",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("STORE", "Store"),
                            ("OFFICE", "Office"),
                            ("LOGISTICS", "Logistics"),
                        ],
                        max_length=100,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.builtenvironmentgridconnection",),
        ),
        migrations.CreateModel(
            name="DieselVehicleAsset",
            fields=[
                (
                    "consumptionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.consumptionasset",
                    ),
                ),
                ("energyConsumption_kWhpkm", models.FloatField()),
                ("vehicleScaling", models.IntegerField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.consumptionasset",),
        ),
        migrations.CreateModel(
            name="DistrictHeatingGridConnection",
            fields=[
                (
                    "utilitygridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.utilitygridconnection",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("MT", "Mt"), ("HT", "Ht"), ("LT", "Lt")], max_length=2
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.utilitygridconnection",),
        ),
        migrations.CreateModel(
            name="ElectricConsumptionAsset",
            fields=[
                (
                    "consumptionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.consumptionasset",
                    ),
                ),
                ("yearlyDemandElectricity_kWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.consumptionasset",),
        ),
        migrations.CreateModel(
            name="ElectricCoversionAsset",
            fields=[
                (
                    "conversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.conversionasset",
                    ),
                ),
                ("capacityElectricity_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.conversionasset",),
        ),
        migrations.CreateModel(
            name="ElectricProductionAsset",
            fields=[
                (
                    "productionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.productionasset",
                    ),
                ),
                ("capacityElectricity_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.productionasset",),
        ),
        migrations.CreateModel(
            name="ElectricStorageAsset",
            fields=[
                (
                    "storageasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.storageasset",
                    ),
                ),
                ("capacityElectricity_kW", models.FloatField()),
                ("storageCapacity_kWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.storageasset",),
        ),
        migrations.CreateModel(
            name="HeatConsumptionAsset",
            fields=[
                (
                    "consumptionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.consumptionasset",
                    ),
                ),
                ("yearlyDemandHeat_kWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.consumptionasset",),
        ),
        migrations.CreateModel(
            name="HeatConversionAsset",
            fields=[
                (
                    "conversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.conversionasset",
                    ),
                ),
                ("deliveryTemp_degc", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.conversionasset",),
        ),
        migrations.CreateModel(
            name="HeatProductionAsset",
            fields=[
                (
                    "productionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.productionasset",
                    ),
                ),
                ("capacityHeat_kW", models.FloatField()),
                ("deliveryTemp_degC", models.FloatField(default=80)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.productionasset",),
        ),
        migrations.CreateModel(
            name="HeatStorageAsset",
            fields=[
                (
                    "storageasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.storageasset",
                    ),
                ),
                ("capacityHeat_kW", models.FloatField()),
                ("minTemp_degC", models.IntegerField()),
                ("maxTemp_degC", models.IntegerField()),
                ("setTemp_degC", models.IntegerField(blank=True, null=True)),
                ("initialTemperature_degC", models.IntegerField(blank=True, null=True)),
                ("lossFactor_WpK", models.FloatField()),
                ("heatCapacity_JpK", models.FloatField()),
                (
                    "ambientTempType",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AIR", "Air"),
                            ("GROUND", "Ground"),
                            ("WATER", "Water"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.storageasset",),
        ),
        migrations.CreateModel(
            name="HouseGridConnection",
            fields=[
                (
                    "builtenvironmentgridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.builtenvironmentgridconnection",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SEMIDETACHED", "Semidetached"),
                            ("TERRACED", "Terraced"),
                            ("DETACHED", "Detached"),
                            ("HIGHRISE", "Highrise"),
                        ],
                        max_length=100,
                    ),
                ),
                ("smart_assets", models.BooleanField(blank=True, null=True)),
                ("tempSetpointNight_degC", models.FloatField(blank=True, null=True)),
                (
                    "tempSetpointNight_start_hr",
                    models.FloatField(blank=True, null=True),
                ),
                ("tempSetpointDay_degC", models.FloatField(blank=True, null=True)),
                ("tempSetpointDay_start_hr", models.FloatField(blank=True, null=True)),
                (
                    "pricelevelLowDifFromAvg_eurpkWh",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "pricelevelHighDifFromAvg_eurpkWh",
                    models.FloatField(blank=True, null=True),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.builtenvironmentgridconnection",),
        ),
        migrations.CreateModel(
            name="HybridConsumptionAsset",
            fields=[
                (
                    "consumptionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.consumptionasset",
                    ),
                ),
                ("yearlyDemandHeat_kWh", models.FloatField()),
                ("yearlyDemandElectricity_kWh", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.consumptionasset",),
        ),
        migrations.CreateModel(
            name="HybridProductionAsset",
            fields=[
                (
                    "productionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.productionasset",
                    ),
                ),
                ("capacityElectricity_kW", models.FloatField()),
                ("capacityHeat_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.productionasset",),
        ),
        migrations.CreateModel(
            name="IndustryGridConnection",
            fields=[
                (
                    "utilitygridconnection_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.utilitygridconnection",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("STEEL", "Steel"),
                            ("INDUSTRY_OTHER", "Industry Other"),
                        ],
                        max_length=25,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.utilitygridconnection",),
        ),
        migrations.CreateModel(
            name="VehicleConversionAsset",
            fields=[
                (
                    "conversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.conversionasset",
                    ),
                ),
                ("energyConsumption_kWhpkm", models.FloatField()),
                ("vehicleScaling", models.IntegerField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.conversionasset",),
        ),
        migrations.DeleteModel(
            name="Asset",
        ),
        migrations.AddField(
            model_name="ruleactionsetcount",
            name="asset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.energyasset",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionsetcount",
            name="contract",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.contract",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionsetcount",
            name="gridconnection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.gridconnection",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionsetcount",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="discrete_factors_set_count",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionremove",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="discrete_factors_remove",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionfactor",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="continuous_factors",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionchangeattribute",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="discrete_factors_attribute",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionbalancegroup",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="discrete_factors_balancegroup",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionadd",
            name="asset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.energyasset",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionadd",
            name="contract",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.contract",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionadd",
            name="gridconnection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.gridconnection",
            ),
        ),
        migrations.AddField(
            model_name="ruleactionadd",
            name="rule",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="discrete_factors_add",
                to="holon.scenariorule",
            ),
        ),
        migrations.AddField(
            model_name="gridconnection",
            name="parent_electric",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.electricgridnode",
            ),
        ),
        migrations.AddField(
            model_name="gridconnection",
            name="parent_heat",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="holon.heatgridnode",
            ),
        ),
        migrations.AddField(
            model_name="balancegroupassetorder",
            name="balance_group",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="balance_group_asset_order",
                to="holon.ruleactionbalancegroup",
            ),
        ),
        migrations.CreateModel(
            name="ChemicalHeatConversionAsset",
            fields=[
                (
                    "heatconversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.heatconversionasset",
                    ),
                ),
                ("capacityHeat_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.heatconversionasset",),
        ),
        migrations.CreateModel(
            name="ElectricHeatConversionAsset",
            fields=[
                (
                    "heatconversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.heatconversionasset",
                    ),
                ),
                ("capacityElectricity_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.heatconversionasset",),
        ),
        migrations.CreateModel(
            name="HybridHeatCoversionAsset",
            fields=[
                (
                    "heatconversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.heatconversionasset",
                    ),
                ),
                (
                    "ambientTempType",
                    models.CharField(
                        choices=[
                            ("AIR", "Air"),
                            ("GROUND", "Ground"),
                            ("WATER", "Water"),
                        ],
                        max_length=255,
                    ),
                ),
                ("capacityHeat_kW", models.FloatField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.heatconversionasset",),
        ),
        migrations.CreateModel(
            name="VehicleElectricStorageAsset",
            fields=[
                (
                    "electricstorageasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.electricstorageasset",
                    ),
                ),
                ("energyConsumption_kWhpkm", models.FloatField()),
                ("vehicleScaling", models.IntegerField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.electricstorageasset",),
        ),
        migrations.CreateModel(
            name="TransportHeatConversionAsset",
            fields=[
                (
                    "electricheatconversionasset_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="holon.electricheatconversionasset",
                    ),
                ),
                (
                    "ambientTempType",
                    models.CharField(
                        choices=[
                            ("AIR", "Air"),
                            ("GROUND", "Ground"),
                            ("WATER", "Water"),
                        ],
                        max_length=255,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("holon.electricheatconversionasset",),
        ),
    ]
