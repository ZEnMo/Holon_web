# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and push all docker images to azure registry

on:
  push:
    branches:
      - main
      - production
      - acceptance
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy-images:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@main
      - name: Authenticate with Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      # Create environment variables ACTIONS_RUNTIME_TOKEN and ACTIONS_CACHE_URL
      # to let docker access the cache.
      - name: Expose variables
        uses: crazy-max/ghaction-github-runtime@v2
      # Need to use driver --driver=docker-container to use GitHub cache integration.
      # The GitHub cache is per-branch.
      - name: Docker build and push
        run: docker buildx create --use --driver=docker-container
      - run: >
          docker buildx build ./src
          --file ./src/prod.Dockerfile
          --target wagtail
          --cache-to type=gha,mode=min,scope=${{ github.ref_name }}-wagtail
          --cache-from type=gha,scope=${{ github.ref_name }}-wagtail
          --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/wagtail:${{ github.ref_name }}
          --push
      - run: >
          docker buildx build ./src
          --file ./src/prod.Dockerfile
          --target clean-scenarios
          --cache-to type=gha,mode=min,scope=${{ github.ref_name }}-clean-scenarios
          --cache-from type=gha,scope=${{ github.ref_name }}-clean-scenarios
          --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/clean-scenarios:${{ github.ref_name }}
          --push
      - run: >
          docker buildx build ./frontend
          --file ./frontend/prod.Dockerfile
          --build-arg NEXT_PUBLIC_WAGTAIL_API_URL=$NEXT_PUBLIC_WAGTAIL_API_URL
          --cache-to type=gha,mode=min,scope=${{ github.ref_name }}-nextjs
          --cache-from type=gha,scope=${{ github.ref_name }}-nextjs
          --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs:${{ github.ref_name }}
          --push
      - run: >
          docker buildx build ./docker
          --cache-to type=gha,mode=min,scope=${{ github.ref_name }}-nginx
          --cache-from type=gha,scope=${{ github.ref_name }}-nginx
          --tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/nginx:${{ github.ref_name }}
          --push
